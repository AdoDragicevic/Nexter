// Basics

.container {
  background-color: #eee;
  max-width: 1000px;
  width: 100%;
  margin: 30px auto;

  display: grid;

  grid-template-rows: 150px 150px; // define rows
  //grid-template-rows: repeat(2, 150px); // equivalent to line above
  
  grid-template-columns: repeat(3, 1fr); // all 3 tracks take uo equal space
  //grid-template-columns: repeat(2, 1fr) 50%; // third takes up 50%, first and second 25% each
  //grid-template-columns: 1fr 2fr 1fr; // the middle has x2 width of first and third
  //grid-template-columns: repeat(2, 150px) 1fr; // fr is franctional unit, it stretches el as much as possible
  //grid-template-columns: repeat(3, 150px);
  //grid-template-columns: 150px 150px 150px; // equivalent to line above
  //grid-template-columns: repeat(2, 150px) 200px; // valid as well

  gap: 30px; // space between rows and columns
  // row-gap: 30px; // space between rows
  // column-gap: 30px; // space between columns
}


.item {
    padding: 20px;
    font-size: 30px;
    font-family: sans-serif;
    color: white;

    &--1 {
      background-color: yellowgreen;
      z-index: 2;

      // place this el as fifth in the grid
      // grid-area is a shorthand for grid-row & grid-column
      // it's a bit confusing, so most devs prefer grid-row & grid-column
      grid-area: 2 / 2 / 3 / 3; // line-number start, column-number start, line-number end, colunm-number end

      // if item already has a correct row, just define column!

      /* Equivalent of grid-area:
        grid-row: 2 / 3; // start / end (row-line)
      */
      /*
      Equivalent of grid-row:
        grid-row-start: 2; // define row line
        grid-row-end: 3; // define row line
      */

      /* Equivalent of grid-area:
        grid-column: 2 / 3;
      */
      /*
      Equivalent of grid-column:
        grid-column-start: 2; // define column line
        grid-column-end: 3; // define column line
      */
    }

    &--2 {
      background-color: orangered;
    }

    &--3 {
      background-color: purple;

      grid-area: 2 / 1 / 3 / 3;
      
      /* Equivalent for grid-area:
      grid-row: 2 / 3;
      grid-column: 1 / 3;
      */
    }

    &--4 {
      background-color: salmon;
    }

    &--5 {
      background-color: darkblue;

      /* To position grid item from start to end use:
        grid-row: 1 / -1; // -1 represents end
      */

      grid-row: 1 / span 2; // equivalent to writing 1 / 3
      grid-column: 3 / 4;
      // grid-area: 1 / 3 / 3 / 4; Shorthand for grid-row & grid-column
    }

    &--6 {
      background-color: violet;

      grid-area: 1 / 2 / 2 / 3;
    }
}



// CHALLENGE

.grid {
  display: grid;
  grid-template-rows: repeat(9, 80px);
  grid-template-columns: repeat(11, 1fr);
  gap: 15px;
  
  max-width: 800px;
  width: 100%;
  margin: 30px auto;
  background-color: #eee;

  &__item {
    background-color: orangered;

    &--1 {
      grid-row: 1 / 2;
      grid-column: 1 / -1;
    }

    &--2 {
      grid-row: 2 / 4;
      grid-column: 1 / 4;
    }

    &--3 {
      grid-row: 2 / span 2;
      grid-column: 4 / span 3;
    }

    &--4 {
      grid-area: 2 / 7 / 4 / 10;
    }

    &--5 {
      grid-area: 2 / 10 / -2 / -1;
    }

    &--6 {
      grid-row: 4 / 9;
      grid-column: 1 / 10;
    }

    &--7 {
      grid-row: 9 / -1;
      grid-column: 1 / -1;
    }
  }
}


// Challenge solution

.challenge {
  max-width: 1000px;
  width: 100%;
  margin: 30px auto;
  background-color: #eee;

  display: grid;
  gap: 30px;
  grid-template-rows: 100px 200px 400px 100px;
  grid-template-columns: repeat(3, 1fr) 200px;

  & > * {
    background-color: orange;
    color: #eee;
    font-family: sans-serif;
    padding: 10px;
  }
}

.header {
  // if item already has a correct row, just define column
  grid-column: 1 / -1;
}

.sidebar {
  grid-column: -2 / -1;
  grid-row: 2 / span 2;
}

.main-content {
  grid-column: 1 / span 3;
}

.footer {
  grid-column: 1 / -1;
}


// Alternative to positioning: grid line names

.positioning {
  background-color: #eee;
  margin: 30px auto;
  width: 100%;
  max-width: 1000px;

  display: grid;
  gap: 30px;
  // we can name grid lines; multiple names are supported
  grid-template-rows: [header-start] 100px [header-end box-start] 200px [box-end main-start] 400px [main-end footer-start] 100px [footer-end];

  // first 3 colums are automatically labeled with col-start 1, col-start 2, etc.
  grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end];

  & > * {
    background-color: orangered;
  }

  &__header {
    grid-column: col-start 1 / grid-end;
  }

  &__main-content {
    grid-column: col-start 1 / col-end 3;
  }

  &__sidebar {
    grid-row: header-end / footer-start;
    grid-column: col-end 3 / grid-end;
  }

  &__footer {
    grid-column: col-start 1 / grid-end;
  }

}



// Alternative to positioning: naming grid areas

.pos {
  background-color: #eee;
  width: 100%;
  max-width: 1000px;
  margin: 30px auto;

  display: grid;
  gap: 30px;

  grid-template-rows: 100px 200px 400px 100px;
  grid-template-columns: repeat(3, 1fr) 200px;

  // each row gets a string
  // each cell gets a name
  // will not work unless you provide a full representation of the grid (here to name 16 cells)
  // very suitable for small layouts
  grid-template-areas: "head head head head"
                       "box box box side"
                       "main main main side"
                       "foot foot foot foot"; 
  // you can have an empty cell by naming the cell with a dot, e.g. "name . name name"

  & > * {
    background-color: orangered;
  }

  &__header {
    grid-area: head; // name of columns it takes
  }

  &__main-content {
    grid-area: main;
  }

  &__sidebar {
    grid-area: side;
  }

  &__footer {
    grid-area: foot;
  }

}