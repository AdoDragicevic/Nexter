.container {
  background-color: #eee;
  max-width: 1000px;
  width: 100%;
  margin: 30px auto;
  display: grid;
  grid-template-rows: 150px 150px;
  grid-template-columns: repeat(3, 1fr);
  gap: 30px; }

.item {
  padding: 20px;
  font-size: 30px;
  font-family: sans-serif;
  color: white; }
  .item--1 {
    background-color: yellowgreen;
    z-index: 2;
    grid-area: 2 / 2 / 3 / 3;
    /* Equivalent of grid-area:
        grid-row: 2 / 3; // start / end (row-line)
      */
    /*
      Equivalent of grid-row:
        grid-row-start: 2; // define row line
        grid-row-end: 3; // define row line
      */
    /* Equivalent of grid-area:
        grid-column: 2 / 3;
      */
    /*
      Equivalent of grid-column:
        grid-column-start: 2; // define column line
        grid-column-end: 3; // define column line
      */ }
  .item--2 {
    background-color: orangered; }
  .item--3 {
    background-color: purple;
    grid-area: 2 / 1 / 3 / 3;
    /* Equivalent for grid-area:
      grid-row: 2 / 3;
      grid-column: 1 / 3;
      */ }
  .item--4 {
    background-color: salmon; }
  .item--5 {
    background-color: darkblue;
    /* To position grid item from start to end use:
        grid-row: 1 / -1; // -1 represents end
      */
    grid-row: 1 / span 2;
    grid-column: 3 / 4; }
  .item--6 {
    background-color: violet;
    grid-area: 1 / 2 / 2 / 3; }

.grid {
  display: grid;
  grid-template-rows: repeat(9, 80px);
  grid-template-columns: repeat(11, 1fr);
  gap: 15px;
  max-width: 800px;
  width: 100%;
  margin: 30px auto;
  background-color: #eee; }
  .grid__item {
    background-color: orangered; }
    .grid__item--1 {
      grid-row: 1 / 2;
      grid-column: 1 / -1; }
    .grid__item--2 {
      grid-row: 2 / 4;
      grid-column: 1 / 4; }
    .grid__item--3 {
      grid-row: 2 / span 2;
      grid-column: 4 / span 3; }
    .grid__item--4 {
      grid-area: 2 / 7 / 4 / 10; }
    .grid__item--5 {
      grid-area: 2 / 10 / -2 / -1; }
    .grid__item--6 {
      grid-row: 4 / 9;
      grid-column: 1 / 10; }
    .grid__item--7 {
      grid-row: 9 / -1;
      grid-column: 1 / -1; }

.challenge {
  max-width: 1000px;
  width: 100%;
  margin: 30px auto;
  background-color: #eee;
  display: grid;
  gap: 30px;
  grid-template-rows: 100px 200px 400px 100px;
  grid-template-columns: repeat(3, 1fr) 200px; }
  .challenge > * {
    background-color: orange;
    color: #eee;
    font-family: sans-serif;
    padding: 10px; }

.header {
  grid-column: 1 / -1; }

.sidebar {
  grid-column: -2 / -1;
  grid-row: 2 / span 2; }

.main-content {
  grid-column: 1 / span 3; }

.footer {
  grid-column: 1 / -1; }

.positioning {
  background-color: #eee;
  margin: 30px auto;
  width: 100%;
  max-width: 1000px;
  display: grid;
  gap: 30px;
  grid-template-rows: [header-start] 100px [header-end box-start] 200px [box-end main-start] 400px [main-end footer-start] 100px [footer-end];
  grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end]; }
  .positioning > * {
    background-color: orangered; }
  .positioning__header {
    grid-column: col-start 1 / grid-end; }
  .positioning__main-content {
    grid-column: col-start 1 / col-end 3; }
  .positioning__sidebar {
    grid-row: header-end / footer-start;
    grid-column: col-end 3 / grid-end; }
  .positioning__footer {
    grid-column: col-start 1 / grid-end; }

.pos {
  background-color: #eee;
  width: 100%;
  max-width: 1000px;
  margin: 30px auto;
  display: grid;
  gap: 30px;
  grid-template-rows: 100px 200px 400px 100px;
  grid-template-columns: repeat(3, 1fr) 200px;
  grid-template-areas: "head head head head" "box box box side" "main main main side" "foot foot foot foot"; }
  .pos > * {
    background-color: orangered; }
  .pos__header {
    grid-area: head; }
  .pos__main-content {
    grid-area: main; }
  .pos__sidebar {
    grid-area: side; }
  .pos__footer {
    grid-area: foot; }

/* 
CSS GRID
  - 2 dimensional layout
  - ROW axis, COLUMN axis
    - unline in flexbox, their dirrection can't be changed
  - grid line is counted for rows & columns; num of row/column + 1
  - gutter - space between rows and columns
  - track - row or vertical line of columns
  - grid area
  - grid cell


  CONTAINER

  display: grid | grid-inline; // creates grid container
  
  grid-template-rows
  grid-template-columns
  grid-template-areas
  grid-template

  row-gap
  column-gap
  gap

  justify-items
  align-items
  justify-content
  align-content

  // items that can't fit in container are placed in implicit rows/columns, by default or based on:
  grd-auto-rows
  grd-auto-columns
  grid-auto-flow: row | columns; add 'dense' keyword to avoid empty places


  Aligning grid items:
    
    justify-items // align items across ROW axis; equivalent to justify-content in flexbox; alligns content of container
    align-items // alig items across COLUMN axis; identical as in flexbox; this will align the content of the container

  
  Allign grid tracks:

    justify-content // indentical to flex-box
    align-content // identical to flex-box; will allign the container rows


  - justify (justify-items, justify-content) always refers to the HORIZONTAL dirrection
  - align (align-items, align-content) always referes to VERTICAL dirrectaion



  ITEMS

  grid-row-start
  grid-row-end
  grid-row

  grid-colum-start
  grid-colum-end
  grid-colum

  grid-areas


  Aligning grid items:
  
    justify-self
    align-self

  order
  - three ways to order (see them in grid-exercise.html / _grid-exercise.scss)



  - it's possible to have multiple grid items in same cell (if we place them there); use z-index to chose 
    which is on top; often used to have overlying imgs and create great effects!


  Implicit vs Explicit grids
  - if it's needed a implicit row or column is created for grid items that dont fit into the defined grid;
    the defined grid is called explicit grid, and this is the implicit grid; el in implicit rows have min height
    required for content of items
  - style implicit grid with:
    grid-auto-rows: 80px; // each added row has height of 80px
    grid-auto-columns: .5fr;
    - this is great with AJAX, when we don't know how many items we will get back
  - grid items that don't fit into our grid are automatically added to next row, because of the next property:
    grid-auto-flow: row | column;


  
  FR
  - fractional unit filles up the entire available space, but is never smaller than the content of the item
  - e.g. 1fr instead of 100%, or 1fr 1fr instead of 50% 50%



  MIN-CONTENT VS. MAX-CONTENT
  - properties that can be used in grid, e.g. instead of units like 1fr
  - e.g. grid-template-columns: max-content 1fr;
  max-content // wide as content; without line breaks!
  min-content // wide as content; with line breaks!


  MINMAX
  - in css grid we can use the minmax function, e.g.:
  grit-template-rows: repeat(2, minmax(150px, max-content)) // rows are wide as content, but with min-width of 150px
  - wen we want the row (or column) to be at least Xpx/rem/em/%/fr high, but higher if contet would overflow
  - wen we want the column (or row) to be at least Xpx/rem/em/%/fr width, but wider if contet would overflow


  AUTO-FIT & AUTO-FILL
  - great for responsive layouts
  - grid-template-column: repeat(auto-fill, 200px); // if container has a width of 1000px we get 5 columns, but if it
    has width of 600px we get 3 columns
  - grid-template-column: repeat(atuo-fill, 100px); // if container has 600px width it still creates 6 columns,
    even if only 2 are filled
  - auto-fit is identical as auto-fill, except for 1 difference: tracs without content are collapsed (width: 0)

  - useful for responsive design:
  - grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); // shifts lines to next row if there is no space;
    each column will take minimum 100px; so if we have 20 columns and parent container has the width of 1000px, this
    automatically creates 2 rows, and adds additional rows as width of parent container shrinks;
    - created rows are implicit rows, so their hight is min-content, change this by adding:
      grid-auto-rows: 150px; // specifies height of implicit rows
*/
